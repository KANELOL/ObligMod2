        // for (let i = 0; i < loopLength; i++) {
        //     document.getElementById("app").innerHTML += model.polls[i].question+` <button onclick='editPoll(${model.polls[i].pollId})'>Endre</button></br>`;

        // function editPoll(id) {
//     model.app.currentPoll = id;
//     //Lager ny variabel pageInputs og
//     // henter informasjon fra model.js model.inputs.createPoll
//     const pageInputs = model.polls[id]; // henter informasjonen et spørsmål skal inneholde

//     // ternary operator? Setter teksten på redigeringsknappen til
//     // "Oppdater" om den allerede har en ID, og "Lag" om den ikke har det
//     const buttonText = pageInputs.pollId !== null ? 'Oppdater' : 'Lag';

//     // Blir brukt med innerHTML til
//     // Lager en konstant variabel som
//     const checked = pageInputs.usersCanAddAlternatives ? 'checked' : ''; // sjekker om folk kan legge til nye alternativer eller ikke
//     const poll = getCurrentPoll();
//     const hasVotes = poll !== null && Object.keys(poll.votes).length > 0;
//     const disableInput = hasVotes ? 'disabled' : '';

//     // create updateViewVotePage function here !!!!!!!

//     // Endrer 
//     document.getElementById('app').innerHTML = `

//         <h3>Spørsmål</h3>
//         <input
//             type="text" 
//             value="${pageInputs.question}" 
//             size="80" 
//             oninput="model.inputs.createPoll.question=this.value" 
//             ${disableInput}
//         />
//         <br/>
//         <input
//             type="checkbox"
//             onchange="model.inputs.createPoll.usersCanAddAlternatives=this.checked==='checked'" 
//             ${// ^ om checkboxen er checked (og har derved attributten "checked"), settes usersCanAdd(...) til true, og ellers false.
//             // checked===true kunne også ha blitt brukt (?)
//             checked} 
//         />
//         <br/>
//         <h4>Alternativer</h4>
//         <ul>
//             ${createVotesHtml()}
//         </ul>
//         <input 
//             type="text" 
//             value="${model.inputs.createPoll.newAlternative}"
//             oninput="model.inputs.createPoll.newAlternative=this.value"
//         />
//         <button createOrUpdatePoll()>Legg til alternativ</button>
//         <p>&nbsp;</p>
//         <button onclick="createOrUpdatePoll()" style="font-size: 150%">${buttonText} spørreundersøkelse</button>
    
//     `;
// }
// //lager stemmer
// function createVotesHtml() {
//     const counts = {};
//     const currentPoll = getCurrentPoll(); // returnerer variabelen poll, eller null fra common.js, som vil da være current poll
//     const votesObj = currentPoll !== null ? currentPoll.votes : {}; // setter voteObj til votes i currentPoll, med mindre det ikke er noen der
//     const votes = Object.values(votesObj);
//     for (let vote of votes) {
//         counts[vote] = (counts[vote] || 0) + 1; // legger til en vote
//     }

//     const pageInputs = model.inputs.createPoll; // kort forkortning av lengre kode der man går inn i createPoll inputs

//     let html = '';
//     for (let option of pageInputs.options) {
//         html += `<li>${option} - ${counts[option] || 0}</li>`; // sjekker hvilke options man har og hvor mange stemmer hver option har
//     }
//     return html;
// }

// function createAlternativesHtml2() {
//     const pageInputs = model.inputs.createPoll;
//     return pageInputs.options.map(option => `<li><${option}/li>`).join(''); // viser hvert alternative som ligger i createPoll
// }
// <button onclick="createOrUpdatePoll()" 
 //console.log("Placement: ",placement ,"DeleteCount:", deleteCount, "InputObj: ", inputObj,"Model app current Poll", model.app.currentPoll);
    //console.log("Splicing");
        //console.log("Spliced element: ", model.polls[placement])
    //console.log("Updating View");

    // function createNewPoll() {
//     console.log("creatingNewPoll")
//     model.inputs.createPoll = {
//         pollId: model.polls.length,
//         newAlternative: '',
//         question: 'New Poll',
//         options: ['A', 'B', 'C'],
//         usersCanAddAlternatives: true,
//     };
//     model.app.currentPage ="createPoll";
//     model.app.currentPoll =null;
//     updateView();
//     console.log("-----Kjører updateView---");
    // function updateAlternative(){
    // model.inputs.createPoll.newAlternative = JSON.stringify(document.getElementById(`divNewAlternative`));
    // console.log(`model.inputs.createPoll.newAlternative`);
    // }
// }
   // if (model.app.currentPage == "createPoll") {
    //     const inputObj = model.inputs.createPoll;
    //     inputObj = {
    //         pollId: null,
    //         newAlternative: '',
    //         question: 'New Poll',
    //         options: ['A', 'B', 'C'],
    //         usersCanAddAlternatives: true,
    //     },
    //     console.log("createPoll");
    // } else {
    //     inputObj = getCurrentPoll();
    //     console.log("updatePoll");
    // } 

//    if(model.app.currentPage == `createPoll`){
//     console.log(model.app.currentPage); 
//        model.inputs.createPoll = {
//         pollId: null,
//         newAlternative: '',
//         question: 'New Question',
//         options: ['Geir', 'Eskil', 'Terje'],
//         usersCanAddAlternatives: true,
//        }
//     } else {
//         model.inputs.createPoll = model.polls[model.currentPoll];
//         console.log(model.polls[model.currentPoll]);
// //  

// model.currentPoll !== null ? model.polls[model.currentPoll]
// }

    //console.log("poll: ", poll);
    //console.log("Keys: ",Object.keys(poll.votes).length)

updateViewVotePage() {
        // // Får teksten til å si Oppdater eller Lag ettersom det er noe der fra før av eller ikke
    // const pageInputs = model.inputs.createPoll; // henter createPoll igjen
    // const buttonText = pageInputs.pollId !== null ? 'Oppdater' : 'Lag';
    // const checked = pageInputs.usersCanAddAlternatives ? 'checked' : ''; // lar admin bestemme om brukerne kan legge til alternativer eller ikke
    // const poll = getCurrentPoll();
    // const hasVotes = poll !== null && Object.keys(poll.votes).length > 0; // Sjekker om det faktisk er stemmer i current poll
    // const disableInput = hasVotes ? 'disabled' : ''; // avslutter avstemning
    // return model.polls.filter(p => p.id === pollId)[0];
   // console.log("PollId gCP:", pollId);